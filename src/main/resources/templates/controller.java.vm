package ${package.Controller};
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.lz.bookstore.common.Result;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import javax.annotation.Resource;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import $!{package.Service}.$!{table.serviceName};
import ${package.Entity}.${entity};
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    private ${table.serviceName} ${table.entityPath}Service;

    @PostMapping
    public Result save(@RequestBody ${entity} ${table.entityPath}) {
        boolean flag = ${table.entityPath}Service.saveOrUpdate(${table.entityPath});
        return Result.success(flag);
    }

    @DeleteMapping("/{id}")
    public Result delete(@PathVariable Integer id) {
        boolean flag = ${table.entityPath}Service.removeById(id);
        return Result.success(flag);
    }

    @GetMapping
    public Result findAll() {
        List<${entity}> ${entity}s = ${table.entityPath}Service.list();
        return Result.success(${entity}s);
    }

    @GetMapping("/{id}")
    public Result findOne(@PathVariable Integer id) {
        ${entity} ${table.entityPath} = ${table.entityPath}Service.getById(id);
        return Result.success(${table.entityPath});
    }

    @GetMapping("/page")
    public Result findPage(@RequestParam Integer pageNum,
                           @RequestParam Integer pageSize) {
        IPage<${entity}> page = ${table.entityPath}Service.page(new Page<>(pageNum, pageSize));
        return Result.success(page);
    }

}

#end
